{"version":3,"sources":["helix/core.cljs"],"mappings":"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","names":["js/Symbol","cljs.core/IPrintWithWriter","cljs.core/-pr-writer","sym","writer","_","cljs.core/-write","helix.core/Fragment","js/module$node_modules$react$index.Fragment","helix.core/Suspense","js/module$node_modules$react$index.Suspense","helix.core/create-element","js/module$node_modules$react$index.createElement","helix.core/create-context","js/module$node_modules$react$index.createContext","helix.core/get-react","js/module$node_modules$react$index","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","helix.core/$","seq42312","G__42313","cljs.core/first","cljs.core/next","self__5711__auto__","type","args","?p","?c","cljs.core/rest","native?","or__5002__auto__","cljs.core/Keyword","cljs.core/meta","type'","cljs.core/name","cljs.core/map?","cljs.core.apply","helix.impl.props._dom_props","helix.impl.props._props","helix.core/$$","helix$core$IExtractType$_type$dyn","x__5350__auto__","m__5351__auto__","helix.core/-type","goog/typeOf","m__5349__auto__","cljs.core/missing-protocol","helix.core/IExtractType","factory","helix.core/type","f","helix.core/factory","x42314","cljs.core/PROTOCOL_SENTINEL","helix.core/cljs-factory","props","cljs.core.dissoc","cljs.core.get","js/undefined","x42315","helix.core/assoc-some","m","k","x","cljs.core.assoc","helix.core/extract-cljs-props","o","goog/DEBUG","cljs.core.ex_info","temp__5821__auto__","helix.core.goog$module$goog$object.get","cljs_bean.core.bean","helix.core/props-kvs-identical?","prev","cur","prev-props","cur-props","cljs.core._EQ_","cljs.core/count","p1__42316#","cljs.core/every?","cljs.core/keys","G__42318","helix.core/memo","js/Error","component","js/module$node_modules$react$index.memo","compare","o'","G__42319","G__42320","helix.core/create-component","spec","statics","render","render'","this","G__42321","G__42322","G__42323","helix.core.goog$module$goog$object.set","helix.impl.classes/createComponent","js/module$node_modules$react$index.Component","G__42325","helix.core/create-ref","helix.core.create_ref","initial-value","ref","js/module$node_modules$react$index.createRef","x42326","G__42327","a","G__42328","G__42329","b","G__42330","G__42331","G__42332","xs","helix.core/register!","id","js/window","js/window.$$Register$$","helix.core/signature!","and__5000__auto__","js/window.$$Signature$$"],"sourcesContent":["(ns helix.core\n  (:refer-clojure :exclude [type])\n  (:require [goog.object :as gobj]\n            [helix.impl.props :as impl.props]\n            [helix.impl.classes :as helix.class]\n            [cljs-bean.core :as bean]\n            [\"react\" :as react])\n  (:require-macros [helix.core]))\n\n\n(when (exists? js/Symbol)\n  (extend-protocol IPrintWithWriter\n    symbol\n    (-pr-writer [sym writer _]\n      (-write writer (str \"\\\"\" (.toString sym) \"\\\"\")))))\n\n\n(def Fragment\n  \"React.Fragment. See `helix.core/<>` for macro version.\"\n  react/Fragment)\n\n\n(def Suspense\n  \"React.Suspense. See `helix.core/suspense` for macro version.\"\n  react/Suspense)\n\n\n(def create-element react/createElement)\n\n\n(def create-context\n  \"React.createContext\"\n  react/createContext)\n\n\n;; this is to enable calling `(.createElement (get-react))` without doing\n;; a dynamic arity dispatch. See https://github.com/Lokeh/helix/issues/20\n(defn ^js/React get-react [] react)\n\n\n(defn $\n  \"Create a new React element from a valid React type.\n\n  Example:\n  ```\n  ($ MyComponent\n   \\\"child1\\\"\n   ($ \\\"span\\\"\n     {:style {:color \\\"green\\\"}}\n     \\\"child2\\\" ))\n  ```\"\n  {:style/indent 0}\n  [type & args]\n  (let [?p (first args)\n        ?c (rest args)\n        native? (or (keyword? type)\n                    (string? type)\n                    (:native (meta type)))\n        type' (if (keyword? type)\n                (name type)\n                type)]\n    (if (map? ?p)\n      (apply create-element\n             type'\n             (if native?\n               (impl.props/-dom-props ?p)\n               (impl.props/-props ?p))\n             ?c)\n      (apply create-element\n             type'\n             nil\n             args))))\n\n\n(def ^:deprecated $$\n  \"Dynamically create a new React element from a valid React type.\n\n  `$` can typically be faster, because it will statically process the arguments\n  at macro-time if possible.\n\n  Example:\n  ```\n  ($$ MyComponent\n   \\\"child1\\\"\n   ($$ \\\"span\\\"\n     {:style {:color \\\"green\\\"}}\n     \\\"child2\\\" ))\n  ```\"\n $)\n\n\n(defprotocol IExtractType\n  (-type [factory] \"Extracts the underlying type from the factory function.\"))\n\n\n(defn type\n  \"Geven a factory function created by `helix.core/factory` or `cljs-factory`,\n  returns the original component that the factory creates elements of.\"\n  [f]\n  (-type f))\n\n\n(defn factory\n  \"Creates a factory function for a React component, that when called returns an\n  element with the props and children passed to the factory.\n\n  Use `helix.core/type` to extract the original React component.\"\n  [type]\n  (-> (fn factory [& args]\n        (apply $ type args))\n      (specify! IExtractType\n        (-type [_] type))))\n\n\n(defn cljs-factory\n  \"Creates a factory function for a component defined via `defnc`, that when\n  called returns an element with the props and children passed to the factory.\n  Slightly more performant than `factory` when used with a helix component.\n\n  Use `helix.core/type` to extract the original component this was called with.\"\n  [type]\n  (-> (fn factory [& args]\n        (if (map? (first args))\n          (let [props (first args)]\n            (apply react/createElement\n                   type\n                   #js {\"helix/props\"\n                        (dissoc props\n                                :key\n                                :ref)\n                        \"key\" (get props :key js/undefined)\n                        \"ref\" (get props :ref js/undefined)}\n                   (rest args)))\n          (apply react/createElement\n                 type\n                 #js {}\n                 args)))\n      (specify! IExtractType\n        (-type [_] type))))\n\n\n(defn- assoc-some [m k x]\n  (if (some? x)\n    (assoc m k x)\n    m))\n\n\n(defn extract-cljs-props\n  \"A helper function for turning a props object into a CLJS map. Works with both\n  factory functions (which stores a map in a single key, \\\"helix/props\\\") and\n  normal JS objects.\n  Mostly used internally by helix, but can be useful when writing HOC.\"\n  [o]\n  (when (and ^boolean goog/DEBUG (or (map? o) (nil? o)))\n    (throw (ex-info \"Props received were a map. This probably means you're calling your component as a function.\" {:props o})))\n  (if-let [props (gobj/get o \"helix/props\")]\n    (assoc-some props :children (gobj/get o \"children\"))\n    (bean/bean o)))\n\n\n(defn- props-kvs-identical?\n  [prev cur]\n  (let [prev-props (extract-cljs-props prev)\n        cur-props (extract-cljs-props cur)]\n    (and (= (count prev-props) (count cur-props))\n         (every?\n          #(identical? (get prev-props %) (get cur-props %))\n          (keys cur-props)))))\n\n\n(defn memo\n  \"Like React.memo, but passes props to `compare` as CLJS map-likes instead of\n  JS objects.\n  `compare` should return true if props are equal, and false if not.\"\n  ([component] (react/memo component props-kvs-identical?))\n  ([component compare]\n   (react/memo\n    component\n    (fn memo-compare\n      [o o']\n      (compare\n       (extract-cljs-props o)\n       (extract-cljs-props o'))))))\n\n\n\n;;\n;; -- class components\n;;\n\n\n\n(defn create-component\n  \"Helper function for creating a class component. See `defcomponent`.\"\n  [spec statics]\n  (let [render (.-render ^js spec)\n        render' (fn [this]\n                  (render\n                   this\n                   (extract-cljs-props (.-props ^js this))\n                   (.-state ^js this)))]\n    (gobj/set spec \"render\" render')\n    (helix.class/createComponent react/Component spec statics)))\n\n(comment\n  (def MyComponent\n    (create-component #js {:displayName \"Foo\"\n                           :constructor\n                           (fn [this]\n                             (set! (.-state this) #js {:count 3}))\n                           :render\n                           (fn [this props state]\n                             (prn props state)\n                             ($$ \"div\" (.-count (.-state this))))}\n                      nil))\n\n  (js/console.log MyComponent)\n\n  (rds/renderToString ($$ MyComponent {:foo \"baz\"})))\n\n(defn create-ref\n  \"Like react/createRef, but the ref can be swapped, reset, and dereferenced\n  like an atom.\n\n  Note: `helix.core/create-ref` is mostly used for class components. Function\n  components typically rely on `helix.hooks/use-ref` instead.\"\n\n  ([]\n   (create-ref nil))\n\n  ([initial-value]\n   (let [^js ref (react/createRef)]\n     (set! (.-current ref)\n           (specify! #js {:current initial-value}\n             IDeref\n             (-deref [^js this]\n               (.-current this))\n\n             IReset\n             (-reset! [^js this x]\n               (set! (.-current this) x))\n\n             ISwap\n             (-swap!\n               ([^js this f]\n                (set! (.-current this) (f (.-current this))))\n               ([^js this f a]\n                (set! (.-current this) (f (.-current this) a)))\n               ([^js this f a b]\n                (set! (.-current this) (f (.-current this) a b)))\n               ([^js this f a b xs]\n                (set! (.-current this) (apply f (.-current this) a b xs))))))\n     (.-current ref))))\n\n;;\n;; -- React Fast Refresh\n;;\n\n\n(defn register!\n  \"Registers a component with the React Fresh runtime.\n  `type` is the component function, and `id` is the unique ID assigned to it\n  (e.g. component name) for cache invalidation.\"\n  [type id]\n  (when (exists? js/window.$$Register$$)\n    (js/window.$$Register$$ type id)))\n\n\n(defn signature! []\n  ;; grrr `maybe` bug strikes again\n  (and (exists? js/window.$$Register$$)\n       (js/window.$$Signature$$)))\n"],"x_google_ignoreList":[0]}